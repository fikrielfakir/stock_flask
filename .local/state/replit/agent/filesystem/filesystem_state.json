{"file_contents":{"APPLICATION_PROMPT.md":{"content":"# StockCéramique - Comprehensive Inventory Management System\n\n## Application Overview\n\nStockCéramique is a modern, full-stack web application designed for comprehensive inventory management of ceramic spare parts in industrial environments. Built with React, TypeScript, and PostgreSQL, it provides real-time inventory tracking, advanced analytics, and streamlined workflow management with a Windows 11 Fluent Design-inspired interface.\n\n## Core Technologies\n\n- **Frontend**: React 18 with TypeScript, Vite build system\n- **Backend**: Node.js with Express.js RESTful API\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with type-safe operations\n- **UI Framework**: Tailwind CSS with Shadcn/ui components\n- **State Management**: TanStack Query (React Query)\n- **Routing**: Wouter lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Charts**: Recharts for data visualization\n- **PWA**: Progressive Web App capabilities with offline support\n\n## Complete Feature Set\n\n### 1. Dashboard & Analytics\n- **Real-time Statistics**: Live inventory counts, low stock alerts, pending requests\n- **Interactive Charts**: Stock evolution trends, purchase status distribution, category breakdowns\n- **Recent Activity**: Latest stock movements and system activities\n- **Predictive Analytics**: AI-powered demand forecasting and reorder recommendations\n- **Performance Monitoring**: System health metrics and optimization suggestions\n- **Responsive Design**: Mobile-first approach with PWA installation support\n\n### 2. Article Management\n- **Comprehensive Article Database**: Code, designation, description, unit, category, brand\n- **Advanced Search & Filtering**: Fuzzy search, multi-criteria filtering, price ranges\n- **Stock Tracking**: Real-time stock levels, minimum thresholds, automatic alerts\n- **Supplier Integration**: Direct supplier assignment and pricing management\n- **Barcode Support**: QR code generation for each article\n- **Bulk Operations**: Import/export functionality with CSV and Excel support\n- **Enhanced Autocomplete**: Intelligent search starting after 3 characters\n\n### 3. Purchase Request System\n- **Multi-Article Requests**: Create requests with multiple items in single transaction\n- **Enhanced Form Interface**: Intelligent autocomplete for articles and suppliers\n- **Approval Workflow**: Status management (Pending, Approved, Ordered, Refused)\n- **Cost Estimation**: Price tracking and budget management\n- **Document Generation**: PDF export for purchase orders\n- **Request Conversion**: Automatic conversion to receptions upon delivery\n\n### 4. Reception Management\n- **Delivery Processing**: Record incoming stock with quantity and pricing verification\n- **Purchase Request Integration**: Convert approved requests to receptions\n- **Stock Updates**: Automatic inventory level adjustments\n- **Quality Control**: Delivery notes and observation tracking\n- **Supplier Performance**: Track delivery times and accuracy\n- **Document Management**: Receipt generation and archival\n\n### 5. Outbound Operations\n- **Stock Consumption Tracking**: Record all stock movements out of inventory\n- **Real-time Stock Validation**: Prevent overselling with live stock checks\n- **Movement Reasons**: Categorize outbound types (production, maintenance, waste)\n- **Cost Tracking**: Track consumption costs and department allocation\n- **Stock Optimization**: Intelligent suggestions for stock level management\n\n### 6. Supplier Management\n- **Comprehensive Vendor Database**: Contact details, payment terms, delivery schedules\n- **Performance Metrics**: Track reliability, pricing, and delivery performance\n- **Contract Management**: Payment conditions and lead time tracking\n- **Communication Tools**: Direct contact integration\n- **Bulk Import/Export**: Supplier data management tools\n\n### 7. Requestor Management\n- **Employee Database**: Department assignments and authorization levels\n- **Department Structure**: Hierarchical organization management\n- **Role-based Access**: Position-based permissions and workflows\n- **Request History**: Track individual and department request patterns\n- **Approval Chains**: Configurable approval workflows by department\n\n### 8. Advanced Reporting & Analytics\n- **Interactive Dashboards**: Customizable analytics with drill-down capabilities\n- **Stock Reports**: Detailed inventory analysis and forecasting\n- **Cost Analysis**: Spending patterns and budget tracking\n- **Performance Metrics**: KPIs for inventory turnover and efficiency\n- **Trend Analysis**: Historical data visualization and pattern recognition\n- **Export Capabilities**: PDF, Excel, and CSV report generation\n\n### 9. Stock Status & Monitoring\n- **Real-time Inventory Levels**: Live stock status across all articles\n- **Low Stock Alerts**: Automated notifications for reorder points\n- **Stock Movement History**: Complete audit trail of all transactions\n- **Valuation Reports**: Current stock value and cost analysis\n- **Optimization Recommendations**: AI-driven suggestions for stock management\n\n### 10. Unified Settings & Administration\n- **System Configuration**: Company details, currency, date formats, language settings\n- **Category Management**: Article categories, brands, departments, positions\n- **User Management**: Role-based access control and permissions\n- **Security Settings**: Password policies, session management, two-factor authentication\n- **Backup Management**: Automated backups with configurable schedules\n- **Audit Logging**: Complete system activity tracking\n- **Performance Optimization**: System monitoring and maintenance tools\n- **Integration Settings**: Barcode scanning, API management\n\n## Key Technical Features\n\n### Enhanced User Experience\n- **Intelligent Autocomplete**: 3-character trigger for efficient article search\n- **Dark/Light Mode**: Automatic theme switching with user preferences\n- **Responsive Design**: Optimized for desktop, tablet, and mobile devices\n- **PWA Support**: Installable web app with offline capabilities\n- **Real-time Updates**: Live data synchronization across all modules\n\n### Data Management\n- **Type Safety**: Full TypeScript implementation with compile-time validation\n- **Data Validation**: Zod schemas for robust input validation\n- **Error Handling**: Comprehensive error management with user-friendly messages\n- **Performance Optimization**: Lazy loading, caching, and query optimization\n- **Data Integrity**: ACID compliance with PostgreSQL transactions\n\n### Security & Compliance\n- **Authentication**: Secure session management\n- **Authorization**: Role-based access control\n- **Data Protection**: Encrypted database connections\n- **Audit Trail**: Complete activity logging\n- **Backup Strategy**: Automated data protection\n\n## Workflow Examples\n\n### Purchase Request Workflow\n1. User searches for articles using enhanced autocomplete\n2. Creates multi-article purchase request with estimated costs\n3. Request enters approval workflow based on user role\n4. Approved requests can be converted to receptions\n5. Stock levels automatically update upon reception\n6. Complete audit trail maintained throughout process\n\n### Stock Management Workflow\n1. Low stock alerts trigger automatically\n2. Purchase requests created with recommended quantities\n3. Supplier performance metrics inform procurement decisions\n4. Incoming stock processed through reception module\n5. Outbound movements tracked with departmental allocation\n6. Real-time analytics provide optimization insights\n\n## Deployment Architecture\n\n- **Frontend Hosting**: Vite-optimized static assets\n- **Backend API**: Express.js server with RESTful endpoints\n- **Database**: PostgreSQL with Neon serverless hosting\n- **CDN**: Static asset delivery optimization\n- **Monitoring**: Performance tracking and error reporting\n- **Scalability**: Horizontal scaling capabilities\n\n## Integration Capabilities\n\n- **Import/Export**: CSV, Excel, PDF format support\n- **Barcode Integration**: QR code generation and scanning\n- **API Endpoints**: RESTful API for third-party integrations\n- **Webhook Support**: Real-time notifications and updates\n- **Backup Systems**: Automated data backup and recovery\n\n## Mobile & PWA Features\n\n- **Progressive Web App**: Full offline functionality\n- **Mobile Optimization**: Touch-friendly interface design\n- **Push Notifications**: Real-time alerts and updates\n- **Offline Mode**: Continue working without internet connection\n- **App Installation**: Native app-like experience on mobile devices\n\nThis comprehensive inventory management system provides everything needed for modern industrial inventory control, from basic stock tracking to advanced analytics and predictive insights, all wrapped in a user-friendly, mobile-ready interface.","size_bytes":8746},"DESKTOP-SETUP.md":{"content":"# StockCéramique Desktop Setup Guide\n\n## For End Users (Simple Installation)\n\n### 1. Download and Install\n1. Download the `StockCeramique Setup.exe` file\n2. Double-click to run the installer\n3. Follow the installation wizard\n4. The app will be installed and a desktop shortcut created\n\n### 2. First Run\n- The app will create a local database automatically\n- All your data stays on your computer\n- No internet connection required\n\n## For Developers (Building from Source)\n\n### Prerequisites\n- Windows 10/11\n- Node.js 18+ installed from https://nodejs.org/\n- Git (optional, for cloning)\n\n### Quick Start\n1. Download or clone the project files\n2. Open Command Prompt or PowerShell in the project folder\n3. Run: `desktop-dev.bat` (for development)\n4. Or run: `desktop-build.bat` (to build installer)\n\n### Available Commands\n\n**Development Mode** (for testing):\n```cmd\ndesktop-dev.bat\n```\nThis starts the development server and opens the app for testing.\n\n**Build Installer** (for distribution):\n```cmd\ndesktop-build.bat\n```\nThis creates the Windows installer (.exe file) in the `dist-electron` folder.\n\n**Run Built App** (after building):\n```cmd\nrun-desktop.bat\n```\nThis runs the production version without rebuilding.\n\n### Manual Commands (if batch files don't work)\n\n**Start Development Server:**\n```cmd\nset DESKTOP_PORT=3001\ntsx server/index-desktop.ts\n```\n\n**Start Electron (in another terminal):**\n```cmd\nelectron electron/main.js\n```\n\n**Build Everything:**\n```cmd\nnpm run build\nnpx esbuild server/index-desktop.ts --platform=node --packages=external --bundle --format=esm --outdir=dist-desktop\nnpx electron-builder --config electron-builder.json --win\n```\n\n## Database Location\n- **Development**: `./data/stockceramique.db`\n- **Installed App**: `%APPDATA%/StockCeramique/stockceramique.db`\n\n## Troubleshooting\n\n### \"tsx is not recognized\"\nInstall TypeScript executor globally:\n```cmd\nnpm install -g tsx\n```\n\n### \"electron is not recognized\"\nInstall Electron globally:\n```cmd\nnpm install -g electron\n```\n\n### Port Already in Use\nChange the port in the batch files:\n```cmd\nset DESKTOP_PORT=3002\n```\n\n### Database Issues\nDelete the database file to reset:\n- Development: Delete `./data/stockceramique.db`\n- Production: Delete `%APPDATA%/StockCeramique/stockceramique.db`\n\n## Features\n- Complete offline operation\n- Local SQLite database\n- Same interface as web version\n- Windows-native application\n- Automatic database backup\n- Fast startup and performance\n\n## Distribution\nThe built installer (`StockCeramique Setup.exe`) can be distributed to any Windows computer without requiring Node.js or any other dependencies.","size_bytes":2618},"PROJECT_PROMPT.md":{"content":"# StockCéramique - Next-Generation Smart Inventory Management System\n\n## System Overview\nStockCéramique is an enterprise-grade, AI-powered inventory management system specifically designed for ceramic spare parts and industrial components. This cutting-edge application combines traditional inventory control with advanced predictive analytics, mobile-first design, and Industry 4.0 integration capabilities. The system provides complete stock control, intelligent supplier management, automated purchase workflows, and comprehensive business intelligence reporting.\n\n## Key Features & Modules\n\n### 1. **Dashboard & Analytics**\n- Real-time inventory overview with key performance indicators\n- Low stock alerts and inventory health monitoring\n- Visual charts and statistics for quick decision making\n- Recent activity tracking and notifications\n\n### 2. **Inventory Management (Articles)**\n- Complete spare parts catalog with detailed specifications\n- Stock level tracking with minimum quantity alerts\n- Barcode generation and scanning capabilities\n- Price history and cost analysis\n- Category and classification management\n\n### 3. **Supplier Management**\n- Comprehensive supplier database with contact information\n- Payment terms and delivery conditions tracking\n- Supplier performance metrics and rating system\n- Purchase history and relationship management\n\n### 4. **Purchase Request Workflow**\n- Multi-stage approval process (En Attente, Approuvé, Commandé, Refusé)\n- Request tracking from initiation to completion\n- Budget approval and authorization controls\n- Purchase order generation and management\n\n### 5. **Reception Management**\n- Incoming inventory processing and validation\n- Quality control checkpoints and inspection records\n- Delivery confirmation and discrepancy handling\n- Automatic stock level updates upon reception\n\n### 6. **Outbound Operations**\n- Stock consumption tracking with detailed reasons\n- Work order and maintenance request integration\n- Return processing and inventory adjustments\n- Movement history and audit trails\n\n### 7. **Reporting & Analytics**\n- Comprehensive inventory reports and stock analysis\n- Purchase performance and supplier evaluation reports\n- Movement tracking and usage pattern analysis\n- Export capabilities (PDF, Excel) for compliance and auditing\n\n### 8. **Data Management & Business Intelligence**\n- Bulk import/export functionality for large datasets\n- Backup and restore capabilities\n- Data validation and integrity checks\n- Integration-ready API for external systems\n- **Interactive Charts & Graphs**: Real-time visual analytics with drill-down capabilities\n- **Custom Dashboard Builder**: Drag-and-drop dashboard creation with 20+ chart types\n- **Executive Summary Reports**: High-level KPIs with visual scorecards and gauges\n- **Trend Analysis**: Time-series charts with predictive projections and forecasting\n- **Heat Maps**: Visual representation of warehouse activity and supplier performance\n\n### 9. **Advanced Features & Strategic Enhancements**\n\n#### **AI-Powered Intelligence**\n- **Smart Demand Forecasting**: Historical data analysis to predict future needs\n- **AI-Powered Reorder Points**: Dynamic minimum quantities based on usage patterns\n- **Anomaly Detection**: Alerts for unusual consumption patterns\n- **Price Optimization**: ML algorithms for optimal pricing opportunities\n- **Supplier Recommendation Engine**: Pattern-based supplier suggestions\n\n#### **Mobile & Modern Experience**\n- **Progressive Web App (PWA)**: Offline capability for warehouse operations\n- **Barcode Scanner Integration**: Native mobile camera scanning\n- **Voice Commands**: Hands-free inventory operations\n- **Push Notifications**: Real-time alerts for critical stock levels\n- **Field Technician App**: Simplified interface for maintenance teams\n\n#### **Advanced Warehouse Management**\n- **Interactive Warehouse Maps**: Visual storage locations with GPS coordinates\n- **Bin Location Optimization**: AI-suggested optimal placement\n- **Pick Path Optimization**: Route planning for efficient inventory picking\n- **Cycle Counting Workflows**: Automated inventory audit scheduling\n- **Multi-Location Management**: Support for multiple warehouses\n\n#### **Quality Control & Compliance**\n- **Certificate Management**: Track quality certificates and expiration dates\n- **Batch/Lot Tracking**: Complete traceability from supplier to installation\n- **Quality Inspection Workflows**: Customizable inspection checklists\n- **Supplier Quality Scorecards**: Track defect rates and quality metrics\n- **Compliance Dashboard**: Monitor regulatory requirements\n\n#### **Financial Integration**\n- **Budget Management**: Department-wise budget allocation and tracking\n- **Cost Center Attribution**: Link costs to specific projects\n- **Price Alert System**: Supplier price change notifications\n- **Carrying Cost Calculator**: Total cost of ownership analysis\n- **ROI Analytics**: Return on investment tracking\n\n#### **Supplier Portal & Collaboration**\n- **Supplier Self-Service Portal**: Catalog and pricing updates\n- **RFQ Management**: Streamlined quote comparison\n- **Contract Management**: Track agreements and renewal dates\n- **Supplier Risk Assessment**: Monitor financial health\n- **Vendor Collaboration Tools**: Shared workspaces\n\n#### **Integration & Automation**\n- **ERP Integration**: Connect with SAP, Oracle, or other enterprise systems\n- **CMMS Integration**: Link with maintenance management systems\n- **E-Procurement Platforms**: Integrate with Ariba, Coupa\n- **API Marketplace**: Pre-built connectors for industrial software\n- **Automated Purchase Orders**: Generate POs at reorder points\n\n#### **Environmental & Sustainability**\n- **Carbon Footprint Tracking**: Monitor environmental impact\n- **Recycling Management**: Track ceramic waste and opportunities\n- **Sustainability Scorecards**: Evaluate suppliers on environmental practices\n- **Green Supplier Discovery**: Identify eco-friendly alternatives\n- **Circular Economy Features**: Track refurbishment and reuse\n\n#### **Industry 4.0 Integration**\n- **IoT Sensor Integration**: Connect with smart shelves and storage sensors\n- **AR/VR Support**: Augmented reality for warehouse navigation\n- **Digital Twin**: Virtual representation of inventory operations\n- **Blockchain Integration**: Immutable supply chain tracking\n\n## Technical Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **UI Components**: Shadcn/ui with Radix UI primitives\n- **Styling**: Tailwind CSS with Microsoft-inspired design system\n- **State Management**: TanStack Query for server state\n- **Routing**: Wouter for client-side navigation\n- **Forms**: React Hook Form with Zod validation\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Database**: PostgreSQL with Drizzle ORM\n- **Validation**: Shared Zod schemas between client/server\n- **API**: RESTful endpoints with comprehensive error handling\n\n### Key Technical Features\n- **Real-time Updates**: Live inventory tracking and notifications\n- **Type Safety**: End-to-end TypeScript for reliability\n- **Responsive Design**: Works seamlessly on desktop and mobile devices\n- **Performance Optimized**: Fast loading with efficient data caching\n- **Security**: Input validation and secure database operations\n- **Accessibility**: WCAG compliant UI components\n\n## Business Value & ROI\n\n### For Operations Teams\n- **80% reduction** in stockout incidents through AI-powered predictions\n- **60% decrease** in manual data entry with advanced automation\n- **50% faster** purchase request processing with streamlined workflows\n- **25% improvement** in inventory turnover rates\n- Real-time mobile access with offline capabilities for uninterrupted operations\n\n### For Management\n- **15% reduction** in carrying costs through optimized inventory levels\n- **10% supplier cost savings** through enhanced negotiation intelligence\n- **70% decrease** in emergency purchases via predictive analytics\n- **95% budget adherence** with advanced financial tracking\n- Executive dashboards with real-time KPIs and trend analysis\n\n### For Maintenance Teams\n- Predictive maintenance integration with equipment schedules\n- Quick access to spare parts with AR-guided warehouse navigation\n- Historical usage data for data-driven maintenance planning\n- Mobile-first interface for field technician efficiency\n- Integration with CMMS systems for seamless workflow\n\n### For Finance & Procurement\n- Total cost of ownership visibility including storage and obsolescence\n- Automated budget allocation and tracking by department/project\n- Supplier risk assessment and alternative sourcing recommendations\n- ROI analytics for inventory optimization initiatives\n- Compliance monitoring with automated regulatory reporting\n\n## Usage Scenarios\n\n1. **Daily Operations**: Monitor stock levels, process incoming/outgoing inventory, handle urgent purchase requests\n2. **Weekly Planning**: Review low stock items, analyze supplier performance, generate procurement reports\n3. **Monthly Reviews**: Comprehensive inventory analysis, cost optimization, supplier relationship management\n4. **Quarterly Audits**: Full inventory reconciliation, compliance reporting, system performance review\n\n## Implementation Roadmap\n\n### **Phase 1 (Months 1-3): Foundation Enhancement**\n- Mobile PWA development with offline capabilities\n- Advanced search and filtering with AI-powered queries\n- Basic predictive analytics for demand forecasting\n- Enhanced barcode scanning and voice commands\n\n### **Phase 2 (Months 4-6): Integration Focus**\n- ERP integration framework (SAP, Oracle)\n- API development for external systems\n- Supplier portal with self-service capabilities\n- Quality control workflows with inspection checklists\n\n### **Phase 3 (Months 7-9): Advanced Intelligence**\n- AI-powered demand forecasting and anomaly detection\n- Advanced warehouse management with interactive maps\n- Comprehensive business intelligence suite\n- Environmental sustainability tracking and reporting\n\n### **Phase 4 (Months 10-12): Industry 4.0 Ready**\n- IoT integration with smart sensors\n- AR/VR capabilities for warehouse operations\n- Machine learning optimization features\n- Blockchain integration for supply chain transparency\n\n## Success Metrics\n\n### **Operational Efficiency Targets**\n- 80% reduction in stockout incidents\n- 60% decrease in manual data entry time\n- 50% faster purchase request processing\n- 25% improvement in inventory turnover rate\n\n### **Cost Optimization Goals**\n- 15% reduction in carrying costs\n- 10% supplier cost savings\n- 70% decrease in emergency purchases\n- 95% budget accuracy and adherence\n\n### **User Experience Objectives**\n- 85% user adoption rate within 3 months\n- 40% reduction in training time for new users\n- Sub-2 second page load times\n- 50% of transactions via mobile interface\n\n## Getting Started\n\nThe system is ready for immediate deployment with:\n- Modern, intuitive interface with Microsoft-inspired design\n- Comprehensive module ecosystem for all inventory operations\n- Scalable architecture supporting growth from startup to enterprise\n- Extensive API capabilities for seamless integration\n- Progressive enhancement roadmap for continuous improvement\n\nThis next-generation solution represents the future of inventory management, combining proven operational excellence with cutting-edge technology to deliver measurable business value and competitive advantage.","size_bytes":11379},"README-Desktop.md":{"content":"# StockCéramique Desktop Edition\n\n## Overview\nStockCéramique Desktop is a Windows .exe application that runs your inventory management system completely offline with a local SQLite database.\n\n## Key Features\n- **Complete Offline Operation**: No internet required after installation\n- **Local SQLite Database**: All data stored securely on your computer\n- **Windows .exe Application**: Easy to install and distribute\n- **Same Great Interface**: Identical web interface in a desktop app\n- **Cross-Platform Ready**: Can build for Windows, Mac, and Linux\n\n## Development and Building\n\n### Prerequisites\n- Node.js 18+\n- All npm dependencies installed (`npm install`)\n\n### Development Mode\n```bash\n# Start desktop development server\nDESKTOP_PORT=3001 tsx server/index-desktop.ts\n\n# In another terminal, start Electron\nelectron electron/main.js\n```\n\n### Building for Distribution\n```bash\n# Build complete desktop application\n./desktop-build.sh\n```\n\nThe build process:\n1. Builds the React frontend (`npm run build`)\n2. Bundles the desktop server with esbuild\n3. Creates the Electron application package\n4. Generates Windows installer (.exe)\n\n### Output Files\nAfter building, you'll find:\n- **Windows**: `dist-electron/StockCéramique Setup.exe` - Installer for Windows\n- **Portable**: `dist-electron/win-unpacked/` - Portable application folder\n\n## Database Storage\n- **Development**: `./data/stockceramique.db`\n- **Production**: User's AppData directory (Windows) or equivalent\n- **Automatic**: Database schema creates automatically on first run\n\n## Distribution\nThe generated .exe file is a complete installer that:\n- Installs the application to Program Files\n- Creates desktop and start menu shortcuts\n- Sets up the local database automatically\n- Requires no additional dependencies\n\n## Architecture\n- **Frontend**: Same React/TypeScript application\n- **Backend**: Express server with SQLite instead of PostgreSQL\n- **Desktop**: Electron wrapper with native OS integration\n- **Database**: SQLite with same schema as web version\n\n## API Endpoints (Local)\nAll endpoints run on `http://127.0.0.1:3001`:\n- `GET /api/health` - Server health check\n- `GET /api/articles` - List all articles\n- `POST /api/articles` - Create new article  \n- `GET /api/dashboard/stats` - Dashboard statistics\n\n## Security\n- Local-only server (127.0.0.1)\n- No external network dependencies\n- All data remains on user's computer\n- Standard Electron security practices\n\n## Future Enhancements\n- Data import/export features\n- Backup/restore functionality\n- Network sync capabilities (optional)\n- Multi-user support for shared databases","size_bytes":2601},"app.py":{"content":"from flask import Flask, jsonify, request, send_from_directory\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_cors import CORS\nfrom flask_migrate import Migrate\nimport os\nfrom datetime import datetime\nimport uuid\nimport logging\n\n# Initialize Flask app\napp = Flask(__name__, static_folder='dist', static_url_path='')\n\n# Configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'postgresql://localhost/stockceramique')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')\n\n# Initialize extensions\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\nCORS(app)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Import models and routes after db initialization\nfrom models import Article, Supplier, Requestor, PurchaseRequest, PurchaseRequestItem, Reception, Outbound\nfrom routes import register_routes\n\n# Register all routes\nregister_routes(app, db)\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found(error):\n    return jsonify({'message': 'Endpoint not found'}), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return jsonify({'message': 'Internal server error'}), 500\n\n# Serve React app\n@app.route('/')\ndef serve():\n    return send_from_directory(app.static_folder, 'index.html')\n\n@app.route('/<path:path>')\ndef serve_static(path):\n    if path != \"\" and os.path.exists(app.static_folder + '/' + path):\n        return send_from_directory(app.static_folder, path)\n    else:\n        return send_from_directory(app.static_folder, 'index.html')\n\nif __name__ == '__main__':\n    # Create tables if they don't exist\n    with app.app_context():\n        db.create_all()\n    \n    # Run the application\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port, debug=os.environ.get('FLASK_ENV') == 'development')","size_bytes":1918},"build_script.js":{"content":"import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nconsole.log('Building StockCeramique Desktop Application');\n\ntry {\n  // Step 1: Clean previous builds\n  console.log('Step 1: Cleaning previous builds...');\n  if (fs.existsSync('dist')) {\n    fs.rmSync('dist', { recursive: true });\n  }\n  if (fs.existsSync('dist-desktop')) {\n    fs.rmSync('dist-desktop', { recursive: true });\n  }\n  if (fs.existsSync('dist-electron-main')) {\n    fs.rmSync('dist-electron-main', { recursive: true });\n  }\n\n  // Step 2: Build React frontend\n  console.log('Step 2: Building React frontend...');\n  execSync('vite build', { stdio: 'inherit' });\n\n  // Step 3: Build backend server\n  console.log('Step 3: Building backend server...');\n  execSync('esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist', { stdio: 'inherit' });\n\n  // Step 4: Build desktop server\n  console.log('Step 4: Building desktop server...');\n  execSync('esbuild server/index-desktop.ts --platform=node --packages=external --bundle --format=esm --outdir=dist-desktop', { stdio: 'inherit' });\n\n  // Step 5: Build Electron main process\n  console.log('Step 5: Building Electron main process...');\n  execSync('esbuild electron/main.ts --platform=node --packages=external --bundle --format=esm --outdir=dist-electron-main', { stdio: 'inherit' });\n\n  // Step 6: Copy necessary files\n  console.log('Step 5: Copying files...');\n  \n  // Copy package.json to dist-desktop\n  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n  // Remove devDependencies to reduce bundle size\n  delete packageJson.devDependencies;\n  fs.writeFileSync(path.join('dist-desktop', 'package.json'), JSON.stringify(packageJson, null, 2));\n\n  // Step 7: Build Electron app\n  console.log('Step 6: Building Electron application...');\n  execSync('electron-builder --config build-config.json', { stdio: 'inherit' });\n\n  console.log('✅ Build completed successfully!');\n  console.log('📦 Electron app built in: dist-electron/');\n\n} catch (error) {\n  console.error('❌ Build failed:', error.message);\n  process.exit(1);\n}\n","size_bytes":2134},"desktop-build.sh":{"content":"#!/bin/bash\n\necho \"🏗️  Building StockCéramique Desktop Application...\"\n\n# Step 1: Build frontend\necho \"📦 Building frontend...\"\nnpm run build\n\n# Step 2: Build desktop server\necho \"🖥️  Building desktop server...\"\nmkdir -p dist-desktop\nesbuild server/index-desktop.ts --platform=node --packages=external --bundle --format=esm --outdir=dist-desktop\n\n# Step 3: Copy necessary files\necho \"📋 Copying files...\"\ncp -r electron dist-desktop/\ncp electron-builder.json dist-desktop/\ncp -r data dist-desktop/ || mkdir -p dist-desktop/data\n\n# Step 4: Build Electron app\necho \"⚡ Building Electron app...\"\nelectron-builder --config dist-desktop/electron-builder.json\n\necho \"✅ Desktop build complete! Check dist-electron folder for the .exe file.\"\necho \"💾 Database will be stored locally in the user's AppData folder\"\necho \"🚀 You can now distribute the .exe file to users\"","size_bytes":882},"desktop-scripts.md":{"content":"\n# Desktop Scripts\ndesktop-dev: concurrently \"tsx server/index-desktop.ts\" \"wait-on http://127.0.0.1:3001 && electron electron/main.js\"\ndesktop-build: vite build && esbuild server/index-desktop.ts --platform=node --packages=external --bundle --format=esm --outdir=dist-desktop && electron-builder --config electron-builder.json\ndesktop-start: electron electron/main.js\n\n","size_bytes":370},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"flask_app.py":{"content":"from flask import Flask, jsonify, request, send_from_directory, render_template\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_cors import CORS\nfrom flask_migrate import Migrate\nimport os\nfrom datetime import datetime\nimport uuid\nimport logging\n\n# Initialize extensions\nmigrate = Migrate()\n\ndef create_app():\n    # Initialize Flask app\n    app = Flask(__name__, static_folder='dist', static_url_path='')\n\n    # Configuration\n    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'postgresql://localhost/stockceramique')\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')\n\n    # Import db from models and initialize\n    from flask_models import db\n    db.init_app(app)\n    migrate.init_app(app, db)\n    CORS(app)\n\n    # Configure logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n\n    # Import models and routes after db initialization\n    from flask_models import Article, Supplier, Requestor, PurchaseRequest, PurchaseRequestItem, Reception, Outbound\n    from routes import register_routes\n\n    # Register all routes\n    register_routes(app, db)\n\n    # Error handlers\n    @app.errorhandler(404)\n    def not_found(error):\n        return jsonify({'message': 'Endpoint not found'}), 404\n\n    @app.errorhandler(500)\n    def internal_error(error):\n        db.session.rollback()\n        return jsonify({'message': 'Internal server error'}), 500\n\n    # Flask template routes\n    @app.route('/')\n    def dashboard():\n        return render_template('dashboard.html')\n    \n    @app.route('/articles')\n    def articles():\n        return render_template('articles.html')\n    \n    @app.route('/suppliers')\n    def suppliers():\n        return render_template('suppliers.html')\n    \n    @app.route('/requestors')\n    def requestors():\n        return render_template('requestors.html')\n    \n    @app.route('/purchase-requests')\n    def purchase_requests():\n        return render_template('purchase_requests.html')\n    \n    @app.route('/reception')\n    def reception():\n        return render_template('reception.html')\n    \n    @app.route('/outbound')\n    def outbound():\n        return render_template('outbound.html')\n    \n    @app.route('/analytics')\n    def analytics():\n        return render_template('analytics.html')\n    \n    @app.route('/purchase-follow')\n    def purchase_follow():\n        return render_template('purchase_follow.html')\n    \n    @app.route('/stock-status')\n    def stock_status():\n        return render_template('stock_status.html')\n    \n    @app.route('/reports')\n    def reports():\n        return render_template('reports.html')\n    \n    @app.route('/settings')\n    def settings():\n        return render_template('settings.html')\n\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    \n    # Create tables if they don't exist\n    with app.app_context():\n        from flask_models import db\n        db.create_all()\n    \n    # Run the application\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port, debug=os.environ.get('FLASK_ENV') == 'development')","size_bytes":3160},"flask_models.py":{"content":"from datetime import datetime\nimport uuid\nfrom flask_sqlalchemy import SQLAlchemy\n\n# This will be initialized in the app factory\ndb = SQLAlchemy()\n\ndef generate_uuid():\n    return str(uuid.uuid4())\n\n# Articles (Spare Parts)\nclass Article(db.Model):\n    __tablename__ = 'articles'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    code_article = db.Column(db.Text, nullable=False, unique=True)\n    designation = db.Column(db.Text, nullable=False)\n    categorie = db.Column(db.Text, nullable=False)\n    marque = db.Column(db.Text)\n    reference = db.Column(db.Text)\n    stock_initial = db.Column(db.Integer, nullable=False, default=0)\n    stock_actuel = db.Column(db.Integer, nullable=False, default=0)\n    unite = db.Column(db.Text, nullable=False, default='pcs')\n    prix_unitaire = db.Column(db.Numeric(10, 2))\n    seuil_minimum = db.Column(db.Integer, default=10)\n    fournisseur_id = db.Column(db.String(36))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'codeArticle': self.code_article,\n            'designation': self.designation,\n            'categorie': self.categorie,\n            'marque': self.marque,\n            'reference': self.reference,\n            'stockInitial': self.stock_initial,\n            'stockActuel': self.stock_actuel,\n            'unite': self.unite,\n            'prixUnitaire': float(self.prix_unitaire) if self.prix_unitaire else None,\n            'seuilMinimum': self.seuil_minimum,\n            'fournisseurId': self.fournisseur_id,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Suppliers\nclass Supplier(db.Model):\n    __tablename__ = 'suppliers'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    nom = db.Column(db.Text, nullable=False)\n    contact = db.Column(db.Text)\n    telephone = db.Column(db.Text)\n    email = db.Column(db.Text)\n    adresse = db.Column(db.Text)\n    conditions_paiement = db.Column(db.Text)\n    delai_livraison = db.Column(db.Integer)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'nom': self.nom,\n            'contact': self.contact,\n            'telephone': self.telephone,\n            'email': self.email,\n            'adresse': self.adresse,\n            'conditionsPaiement': self.conditions_paiement,\n            'delaiLivraison': self.delai_livraison,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Requestors\nclass Requestor(db.Model):\n    __tablename__ = 'requestors'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    nom = db.Column(db.Text, nullable=False)\n    prenom = db.Column(db.Text, nullable=False)\n    departement = db.Column(db.Text, nullable=False)\n    poste = db.Column(db.Text)\n    email = db.Column(db.Text)\n    telephone = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'nom': self.nom,\n            'prenom': self.prenom,\n            'departement': self.departement,\n            'poste': self.poste,\n            'email': self.email,\n            'telephone': self.telephone,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Purchase Requests (Header)\nclass PurchaseRequest(db.Model):\n    __tablename__ = 'purchase_requests'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    numero_demande = db.Column(db.String(50), unique=True)\n    date_demande = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    requestor_id = db.Column(db.String(36), nullable=False)\n    observations = db.Column(db.Text)\n    statut = db.Column(db.Text, nullable=False, default='en_attente')  # en_attente, approuve, refuse, commande, recu\n    total_articles = db.Column(db.Integer, nullable=False, default=0)\n    total_estime = db.Column(db.Numeric(10, 2), default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'numeroDemande': self.numero_demande,\n            'dateDemande': self.date_demande.isoformat() if self.date_demande else None,\n            'requestorId': self.requestor_id,\n            'observations': self.observations,\n            'statut': self.statut,\n            'totalArticles': self.total_articles,\n            'totalEstime': float(self.total_estime) if self.total_estime else 0,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Purchase Request Items\nclass PurchaseRequestItem(db.Model):\n    __tablename__ = 'purchase_request_items'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    purchase_request_id = db.Column(db.String(36), db.ForeignKey('purchase_requests.id'), nullable=False)\n    article_id = db.Column(db.String(36), db.ForeignKey('articles.id'), nullable=False)\n    supplier_id = db.Column(db.String(36), db.ForeignKey('suppliers.id'))\n    quantite_demandee = db.Column(db.Integer, nullable=False)\n    prix_unitaire_estime = db.Column(db.Numeric(10, 2))\n    sous_total = db.Column(db.Numeric(10, 2))\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    purchase_request = db.relationship('PurchaseRequest', backref='items')\n    article = db.relationship('Article')\n    supplier = db.relationship('Supplier')\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'purchaseRequestId': self.purchase_request_id,\n            'articleId': self.article_id,\n            'quantiteDemandee': self.quantite_demandee,\n            'supplierId': self.supplier_id,\n            'prixUnitaireEstime': float(self.prix_unitaire_estime) if self.prix_unitaire_estime else None,\n            'sousTotal': float(self.sous_total) if self.sous_total else 0,\n            'observations': self.observations,\n            'article': self.article.to_dict() if self.article else None,\n            'supplier': self.supplier.to_dict() if self.supplier else None,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Goods Reception\nclass Reception(db.Model):\n    __tablename__ = 'receptions'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    date_reception = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    supplier_id = db.Column(db.String(36), nullable=False)\n    article_id = db.Column(db.String(36), nullable=False)\n    quantite_recue = db.Column(db.Integer, nullable=False)\n    prix_unitaire = db.Column(db.Numeric(10, 2))\n    numero_bon_livraison = db.Column(db.Text)\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'dateReception': self.date_reception.isoformat() if self.date_reception else None,\n            'supplierId': self.supplier_id,\n            'articleId': self.article_id,\n            'quantiteRecue': self.quantite_recue,\n            'prixUnitaire': float(self.prix_unitaire) if self.prix_unitaire else None,\n            'numeroBonLivraison': self.numero_bon_livraison,\n            'observations': self.observations,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Stock Outbound\nclass Outbound(db.Model):\n    __tablename__ = 'outbounds'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    date_sortie = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    requestor_id = db.Column(db.String(36), nullable=False)\n    article_id = db.Column(db.String(36), nullable=False)\n    quantite_sortie = db.Column(db.Integer, nullable=False)\n    motif_sortie = db.Column(db.Text, nullable=False)\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'dateSortie': self.date_sortie.isoformat() if self.date_sortie else None,\n            'requestorId': self.requestor_id,\n            'articleId': self.article_id,\n            'quantiteSortie': self.quantite_sortie,\n            'motifSortie': self.motif_sortie,\n            'observations': self.observations,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }","size_bytes":8682},"models.py":{"content":"from datetime import datetime\nimport uuid\nfrom app import db\n\ndef generate_uuid():\n    return str(uuid.uuid4())\n\n# Articles (Spare Parts)\nclass Article(db.Model):\n    __tablename__ = 'articles'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    code_article = db.Column(db.Text, nullable=False, unique=True)\n    designation = db.Column(db.Text, nullable=False)\n    categorie = db.Column(db.Text, nullable=False)\n    marque = db.Column(db.Text)\n    reference = db.Column(db.Text)\n    stock_initial = db.Column(db.Integer, nullable=False, default=0)\n    stock_actuel = db.Column(db.Integer, nullable=False, default=0)\n    unite = db.Column(db.Text, nullable=False, default='pcs')\n    prix_unitaire = db.Column(db.Numeric(10, 2))\n    seuil_minimum = db.Column(db.Integer, default=10)\n    fournisseur_id = db.Column(db.String(36))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'codeArticle': self.code_article,\n            'designation': self.designation,\n            'categorie': self.categorie,\n            'marque': self.marque,\n            'reference': self.reference,\n            'stockInitial': self.stock_initial,\n            'stockActuel': self.stock_actuel,\n            'unite': self.unite,\n            'prixUnitaire': float(self.prix_unitaire) if self.prix_unitaire else None,\n            'seuilMinimum': self.seuil_minimum,\n            'fournisseurId': self.fournisseur_id,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Suppliers\nclass Supplier(db.Model):\n    __tablename__ = 'suppliers'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    nom = db.Column(db.Text, nullable=False)\n    contact = db.Column(db.Text)\n    telephone = db.Column(db.Text)\n    email = db.Column(db.Text)\n    adresse = db.Column(db.Text)\n    conditions_paiement = db.Column(db.Text)\n    delai_livraison = db.Column(db.Integer)  # in days\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'nom': self.nom,\n            'contact': self.contact,\n            'telephone': self.telephone,\n            'email': self.email,\n            'adresse': self.adresse,\n            'conditionsPaiement': self.conditions_paiement,\n            'delaiLivraison': self.delai_livraison,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Requestors\nclass Requestor(db.Model):\n    __tablename__ = 'requestors'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    nom = db.Column(db.Text, nullable=False)\n    prenom = db.Column(db.Text, nullable=False)\n    departement = db.Column(db.Text, nullable=False)\n    poste = db.Column(db.Text)\n    email = db.Column(db.Text)\n    telephone = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'nom': self.nom,\n            'prenom': self.prenom,\n            'departement': self.departement,\n            'poste': self.poste,\n            'email': self.email,\n            'telephone': self.telephone,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Purchase Requests (Header)\nclass PurchaseRequest(db.Model):\n    __tablename__ = 'purchase_requests'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    date_demande = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    requestor_id = db.Column(db.String(36), nullable=False)\n    date_initiation = db.Column(db.DateTime, default=datetime.utcnow)\n    observations = db.Column(db.Text)\n    statut = db.Column(db.Text, nullable=False, default='en_attente')  # en_attente, approuve, refuse, commande\n    total_articles = db.Column(db.Integer, nullable=False, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'dateDemande': self.date_demande.isoformat() if self.date_demande else None,\n            'requestorId': self.requestor_id,\n            'dateInitiation': self.date_initiation.isoformat() if self.date_initiation else None,\n            'observations': self.observations,\n            'statut': self.statut,\n            'totalArticles': self.total_articles,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Purchase Request Items (Details for multiple articles)\nclass PurchaseRequestItem(db.Model):\n    __tablename__ = 'purchase_request_items'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    purchase_request_id = db.Column(db.String(36), nullable=False)\n    article_id = db.Column(db.String(36), nullable=False)\n    quantite_demandee = db.Column(db.Integer, nullable=False)\n    supplier_id = db.Column(db.String(36))\n    prix_unitaire_estime = db.Column(db.Numeric(10, 2))\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'purchaseRequestId': self.purchase_request_id,\n            'articleId': self.article_id,\n            'quantiteDemandee': self.quantite_demandee,\n            'supplierId': self.supplier_id,\n            'prixUnitaireEstime': float(self.prix_unitaire_estime) if self.prix_unitaire_estime else None,\n            'observations': self.observations,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Goods Reception\nclass Reception(db.Model):\n    __tablename__ = 'receptions'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    date_reception = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    supplier_id = db.Column(db.String(36), nullable=False)\n    article_id = db.Column(db.String(36), nullable=False)\n    quantite_recue = db.Column(db.Integer, nullable=False)\n    prix_unitaire = db.Column(db.Numeric(10, 2))\n    numero_bon_livraison = db.Column(db.Text)\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'dateReception': self.date_reception.isoformat() if self.date_reception else None,\n            'supplierId': self.supplier_id,\n            'articleId': self.article_id,\n            'quantiteRecue': self.quantite_recue,\n            'prixUnitaire': float(self.prix_unitaire) if self.prix_unitaire else None,\n            'numeroBonLivraison': self.numero_bon_livraison,\n            'observations': self.observations,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }\n\n# Stock Outbound\nclass Outbound(db.Model):\n    __tablename__ = 'outbounds'\n    \n    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)\n    date_sortie = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    requestor_id = db.Column(db.String(36), nullable=False)\n    article_id = db.Column(db.String(36), nullable=False)\n    quantite_sortie = db.Column(db.Integer, nullable=False)\n    motif_sortie = db.Column(db.Text, nullable=False)\n    observations = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'dateSortie': self.date_sortie.isoformat() if self.date_sortie else None,\n            'requestorId': self.requestor_id,\n            'articleId': self.article_id,\n            'quantiteSortie': self.quantite_sortie,\n            'motifSortie': self.motif_sortie,\n            'observations': self.observations,\n            'createdAt': self.created_at.isoformat() if self.created_at else None\n        }","size_bytes":7998},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"flask-migrate>=4.1.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-dotenv>=1.1.1\",\n    \"sqlalchemy>=2.0.43\",\n]\n","size_bytes":357},"replit.md":{"content":"# StockCéramique - Inventory Management System\n\n## Overview\nStockCéramique is a comprehensive inventory management system for ceramic spare parts. It tracks stock levels, manages suppliers, processes purchase requests, handles receptions and outbound shipments, and generates reports. The system is tailored for industrial environments, offering features like low stock alerts, detailed movement tracking, and comprehensive reporting. Its vision is to provide precise inventory control, ensuring operational efficiency and informed decision-making.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 23, 2025)\n**Complete Flask Migration**: Successfully rebuilt the application as a pure server-side Flask application, removing all React, Node.js, and Electron dependencies. Key transformations include:\n- Complete Flask-based architecture with server-side rendering\n- PostgreSQL database integration with SQLAlchemy ORM\n- 12 comprehensive modules covering complete inventory management workflow\n- Microsoft-inspired UI design with Tailwind CSS and Mica effects\n- Advanced interactive features using vanilla JavaScript and Chart.js\n- Real-time dashboard with predictive analytics and visual insights\n- Comprehensive reporting system with multi-format exports\n\n## System Architecture\n\n### Application Architecture\n- **Framework**: Flask (Python) with server-side rendering\n- **Templates**: Jinja2 templates with comprehensive HTML/CSS/JavaScript\n- **Styling**: Tailwind CSS with Microsoft-inspired design system\n- **Interactive Features**: Vanilla JavaScript with modern ES6+ features\n- **Data Visualization**: Chart.js for advanced charts and analytics\n- **Icons**: Font Awesome and Lucide for comprehensive iconography\n- **Responsive Design**: Mobile-first approach with grid layouts\n\n### Backend Architecture\n- **Runtime**: Python 3.11+ with Flask framework\n- **API Design**: RESTful endpoints with JSON responses\n- **Database ORM**: SQLAlchemy with Flask-SQLAlchemy integration\n- **Migrations**: Flask-Migrate for database schema management\n- **Validation**: Server-side validation with comprehensive error handling\n\n### Data Storage\n- **Primary Database**: PostgreSQL with connection pooling\n- **ORM**: SQLAlchemy with declarative models\n- **Schema Management**: Flask-Migrate for version control\n- **Data Integrity**: Foreign key constraints and relationship management\n\n### Core Entities and Relationships\n- **Articles**: Spare parts inventory with stock tracking, pricing, supplier relationships, and QR code generation\n- **Suppliers**: Vendor management with performance tracking and delivery analytics\n- **Requestors**: Employee/department management with role-based permissions and request history\n- **Purchase Requests**: Multi-article workflow with approval states and automated notifications\n- **Receptions**: Incoming inventory tracking with automatic stock updates and quality control\n- **Outbounds**: Stock consumption tracking with project allocation and cost center management\n- **Stock Movements**: Complete audit trail with real-time movement tracking and analytics\n\n### Application Modules (12 Screens)\n1. **Dashboard (/)**: Real-time overview with metrics, charts, alerts, and quick actions\n2. **Articles (/articles)**: Complete inventory management with search, analytics, and QR codes\n3. **Purchase Requests (/purchase-requests)**: Multi-article request creation and management\n4. **Purchase Follow-up (/purchase-follow)**: Kanban-style workflow tracking and approval\n5. **Stock Status (/stock-status)**: Visual monitoring with color-coded status indicators\n6. **Reception (/reception)**: Goods receiving with automatic stock updates\n7. **Outbound (/outbound)**: Stock consumption tracking with project management\n8. **Suppliers (/suppliers)**: Vendor management with performance analytics\n9. **Requestors (/requestors)**: Personnel management with department integration\n10. **Reports (/reports)**: Comprehensive reporting with multi-format exports\n11. **Settings (/settings)**: System configuration and master data management\n12. **Analytics (/analytics)**: Business intelligence with predictive insights\n\n### Authentication and Authorization\nBasic session-based approach with future plans for role-based access control (Administrator, Manager, Employee).\n\n### API Design\nRESTful API with consistent endpoint patterns for CRUD operations, dashboard statistics, and low stock alerts. Includes error handling middleware and request logging.\n\n### Key Features and Design Decisions\n- **Server-Side Architecture**: Pure Flask application with server-side rendering for optimal performance and SEO.\n- **12 Comprehensive Modules**: Complete inventory management workflow from dashboard to analytics.\n- **Microsoft-Inspired Design**: Mica effects, Windows-style UI components, and modern design language.\n- **Real-Time Dashboard**: Live metrics, predictive analytics, and interactive charts with Chart.js.\n- **Advanced Search**: Global search functionality with intelligent filtering across all entities.\n- **Kanban Workflow**: Purchase follow-up with drag-and-drop style interface for request tracking.\n- **Visual Stock Monitoring**: Color-coded stock status with real-time alerts and threshold management.\n- **Multi-Format Reporting**: PDF, Excel, CSV, and JSON export capabilities with custom report builder.\n- **Comprehensive Settings**: Master data management, security policies, backup systems, and integrations.\n- **Dynamic Forms**: AJAX-powered forms with real-time validation and autocomplete features.\n- **French Localization**: Complete French interface with EUR currency formatting.\n- **Responsive Design**: Mobile-first approach with Tailwind CSS grid systems.\n- **Performance Optimized**: Efficient database queries, lazy loading, and optimized asset delivery.\n- **Security Features**: Session management, audit logging, and secure data handling.\n- **Toast Notifications**: Real-time feedback system with contextual alerts and confirmations.\n\n## External Dependencies\n\n### Database Services\n- **PostgreSQL**: Robust relational database with ACID compliance\n- **SQLAlchemy**: Python SQL toolkit and Object-Relational Mapping\n\n### UI and Styling Libraries\n- **Tailwind CSS**: Utility-first CSS framework via CDN\n- **Font Awesome**: Comprehensive icon library\n- **Lucide**: Modern icon system for additional iconography\n- **Chart.js**: Powerful charting library for data visualization\n\n### Python Framework and Extensions\n- **Flask**: Micro web framework for Python\n- **Flask-SQLAlchemy**: SQLAlchemy integration for Flask\n- **Flask-Migrate**: Database migration support\n- **Flask-CORS**: Cross-Origin Resource Sharing support\n- **Gunicorn**: Python WSGI HTTP Server for production\n- **psycopg2-binary**: PostgreSQL adapter for Python\n- **python-dotenv**: Environment variable management\n\n### Development and Runtime\n- **Python 3.11+**: Modern Python runtime\n- **Jinja2**: Template engine (included with Flask)\n- **Werkzeug**: WSGI utility library (included with Flask)\n- **Click**: Command line interface creation toolkit","size_bytes":7107},"routes.py":{"content":"from flask import jsonify, request\nfrom datetime import datetime\nimport uuid\nfrom sqlalchemy import or_, func, desc\n\ndef register_routes(app, db):\n    from flask_models import Article, Supplier, Requestor, PurchaseRequest, PurchaseRequestItem, Reception, Outbound\n    \n    # Articles routes\n    @app.route(\"/api/articles\", methods=['GET'])\n    def get_articles():\n        try:\n            articles = Article.query.all()\n            return jsonify([article.to_dict() for article in articles])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des articles'}), 500\n\n    @app.route(\"/api/articles/search\", methods=['GET'])\n    def search_articles():\n        try:\n            query = request.args.get('query', '')\n            if not query or len(query) < 3:\n                return jsonify([])\n            \n            search_term = f'%{query.lower()}%'\n            articles = Article.query.filter(\n                or_(\n                    func.lower(Article.designation).like(search_term),\n                    func.lower(Article.code_article).like(search_term),\n                    func.lower(Article.reference).like(search_term),\n                    func.lower(Article.categorie).like(search_term)\n                )\n            ).limit(10).all()\n            \n            return jsonify([article.to_dict() for article in articles])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la recherche d\\'articles'}), 500\n\n    @app.route(\"/api/search/global\", methods=['GET'])\n    def global_search():\n        try:\n            query = request.args.get('query', '')\n            if not query or len(query) < 2:\n                return jsonify({'results': [], 'totalCount': 0})\n            \n            search_term = f'%{query.lower()}%'\n            results = []\n            \n            # Search Articles\n            articles = Article.query.filter(\n                or_(\n                    func.lower(Article.designation).like(search_term),\n                    func.lower(Article.code_article).like(search_term),\n                    func.lower(Article.reference).like(search_term),\n                    func.lower(Article.categorie).like(search_term)\n                )\n            ).limit(5).all()\n            \n            for article in articles:\n                results.append({\n                    'type': 'article',\n                    'id': article.id,\n                    'title': article.designation,\n                    'subtitle': f'{article.code_article} - {article.categorie}',\n                    'extra': f'Stock: {article.stock_actuel}',\n                    'path': '/articles',\n                    'data': article.to_dict()\n                })\n            \n            # Search Suppliers\n            suppliers = Supplier.query.filter(\n                or_(\n                    func.lower(Supplier.nom).like(search_term),\n                    func.lower(Supplier.contact).like(search_term)\n                )\n            ).limit(5).all()\n            \n            for supplier in suppliers:\n                results.append({\n                    'type': 'supplier',\n                    'id': supplier.id,\n                    'title': supplier.nom,\n                    'subtitle': supplier.contact or 'Pas de contact',\n                    'extra': supplier.adresse or '',\n                    'path': '/suppliers',\n                    'data': supplier.to_dict()\n                })\n            \n            # Search Requestors\n            requestors = Requestor.query.filter(\n                or_(\n                    func.lower(func.concat(Requestor.prenom, ' ', Requestor.nom)).like(search_term),\n                    func.lower(Requestor.departement).like(search_term),\n                    func.lower(Requestor.poste).like(search_term)\n                )\n            ).limit(5).all()\n            \n            for requestor in requestors:\n                results.append({\n                    'type': 'requestor',\n                    'id': requestor.id,\n                    'title': f'{requestor.prenom} {requestor.nom}',\n                    'subtitle': requestor.departement,\n                    'extra': requestor.poste or '',\n                    'path': '/requestors',\n                    'data': requestor.to_dict()\n                })\n            \n            return jsonify({\n                'results': results[:15],\n                'totalCount': len(results),\n                'categories': {\n                    'articles': len([r for r in results if r['type'] == 'article']),\n                    'suppliers': len([r for r in results if r['type'] == 'supplier']),\n                    'requestors': len([r for r in results if r['type'] == 'requestor'])\n                }\n            })\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la recherche globale'}), 500\n\n    @app.route(\"/api/articles/<article_id>\", methods=['GET'])\n    def get_article(article_id):\n        try:\n            article = Article.query.get(article_id)\n            if not article:\n                return jsonify({'message': 'Article non trouvé'}), 404\n            return jsonify(article.to_dict())\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération de l\\'article'}), 500\n\n    @app.route(\"/api/articles\", methods=['POST'])\n    def create_article():\n        try:\n            data = request.get_json()\n            article = Article(\n                code_article=data['codeArticle'],\n                designation=data['designation'],\n                categorie=data['categorie'],\n                marque=data.get('marque'),\n                reference=data.get('reference'),\n                stock_initial=data.get('stockInitial', 0),\n                stock_actuel=data.get('stockInitial', 0),\n                unite=data.get('unite', 'pcs'),\n                prix_unitaire=data.get('prixUnitaire'),\n                seuil_minimum=data.get('seuilMinimum', 10),\n                fournisseur_id=data.get('fournisseurId')\n            )\n            db.session.add(article)\n            db.session.commit()\n            return jsonify(article.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    @app.route(\"/api/articles/<article_id>\", methods=['PUT'])\n    def update_article(article_id):\n        try:\n            article = Article.query.get(article_id)\n            if not article:\n                return jsonify({'message': 'Article non trouvé'}), 404\n            \n            data = request.get_json()\n            for key, value in data.items():\n                if hasattr(article, key.replace('C', '_c').replace('A', '_a').replace('I', '_i').replace('M', '_m').replace('S', '_s').replace('P', '_p').replace('F', '_f').lower()):\n                    setattr(article, key.replace('C', '_c').replace('A', '_a').replace('I', '_i').replace('M', '_m').replace('S', '_s').replace('P', '_p').replace('F', '_f').lower(), value)\n            \n            db.session.commit()\n            return jsonify(article.to_dict())\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la mise à jour', 'error': str(e)}), 400\n\n    @app.route(\"/api/articles/<article_id>\", methods=['DELETE'])\n    def delete_article(article_id):\n        try:\n            article = Article.query.get(article_id)\n            if not article:\n                return jsonify({'message': 'Article non trouvé'}), 404\n            \n            db.session.delete(article)\n            db.session.commit()\n            return '', 204\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la suppression'}), 500\n\n    @app.route(\"/api/articles/low-stock\", methods=['GET'])\n    def get_low_stock_articles():\n        try:\n            articles = Article.query.filter(Article.stock_actuel <= Article.seuil_minimum).all()\n            return jsonify([article.to_dict() for article in articles])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des articles en stock bas'}), 500\n\n    # Suppliers routes\n    @app.route(\"/api/suppliers\", methods=['GET'])\n    def get_suppliers():\n        try:\n            suppliers = Supplier.query.all()\n            return jsonify([supplier.to_dict() for supplier in suppliers])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des fournisseurs'}), 500\n\n    @app.route(\"/api/suppliers\", methods=['POST'])\n    def create_supplier():\n        try:\n            data = request.get_json()\n            supplier = Supplier(\n                nom=data['nom'],\n                contact=data.get('contact'),\n                telephone=data.get('telephone'),\n                email=data.get('email'),\n                adresse=data.get('adresse'),\n                conditions_paiement=data.get('conditionsPaiement'),\n                delai_livraison=data.get('delaiLivraison')\n            )\n            db.session.add(supplier)\n            db.session.commit()\n            return jsonify(supplier.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    @app.route(\"/api/suppliers/<supplier_id>\", methods=['PUT'])\n    def update_supplier(supplier_id):\n        try:\n            supplier = Supplier.query.get(supplier_id)\n            if not supplier:\n                return jsonify({'message': 'Fournisseur non trouvé'}), 404\n            \n            data = request.get_json()\n            for key, value in data.items():\n                snake_key = key.replace('conditionsPaiement', 'conditions_paiement').replace('delaiLivraison', 'delai_livraison')\n                if hasattr(supplier, snake_key):\n                    setattr(supplier, snake_key, value)\n            \n            db.session.commit()\n            return jsonify(supplier.to_dict())\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la mise à jour', 'error': str(e)}), 400\n\n    @app.route(\"/api/suppliers/<supplier_id>\", methods=['DELETE'])\n    def delete_supplier(supplier_id):\n        try:\n            supplier = Supplier.query.get(supplier_id)\n            if not supplier:\n                return jsonify({'message': 'Fournisseur non trouvé'}), 404\n            \n            db.session.delete(supplier)\n            db.session.commit()\n            return '', 204\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la suppression'}), 500\n\n    # Requestors routes\n    @app.route(\"/api/requestors\", methods=['GET'])\n    def get_requestors():\n        try:\n            requestors = Requestor.query.all()\n            return jsonify([requestor.to_dict() for requestor in requestors])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des demandeurs'}), 500\n\n    @app.route(\"/api/requestors\", methods=['POST'])\n    def create_requestor():\n        try:\n            data = request.get_json()\n            requestor = Requestor(\n                nom=data['nom'],\n                prenom=data['prenom'],\n                departement=data['departement'],\n                poste=data.get('poste'),\n                email=data.get('email'),\n                telephone=data.get('telephone')\n            )\n            db.session.add(requestor)\n            db.session.commit()\n            return jsonify(requestor.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    @app.route(\"/api/requestors/<requestor_id>\", methods=['PUT'])\n    def update_requestor(requestor_id):\n        try:\n            requestor = Requestor.query.get(requestor_id)\n            if not requestor:\n                return jsonify({'message': 'Demandeur non trouvé'}), 404\n            \n            data = request.get_json()\n            for key, value in data.items():\n                if hasattr(requestor, key):\n                    setattr(requestor, key, value)\n            \n            db.session.commit()\n            return jsonify(requestor.to_dict())\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la mise à jour', 'error': str(e)}), 400\n\n    @app.route(\"/api/requestors/<requestor_id>\", methods=['DELETE'])\n    def delete_requestor(requestor_id):\n        try:\n            requestor = Requestor.query.get(requestor_id)\n            if not requestor:\n                return jsonify({'message': 'Demandeur non trouvé'}), 404\n            \n            db.session.delete(requestor)\n            db.session.commit()\n            return '', 204\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la suppression'}), 500\n\n    # Purchase Requests routes\n    @app.route(\"/api/purchase-requests\", methods=['GET'])\n    def get_purchase_requests():\n        try:\n            requests = PurchaseRequest.query.all()\n            return jsonify([request.to_dict() for request in requests])\n        except Exception as e:\n            print(f\"Purchase requests error: {str(e)}\")\n            return jsonify({'message': f'Erreur lors de la récupération des demandes d\\'achat: {str(e)}'}), 500\n\n    @app.route(\"/api/purchase-requests\", methods=['POST'])\n    def create_purchase_request():\n        try:\n            data = request.get_json()\n            \n            # Generate request number\n            count = PurchaseRequest.query.count() + 1\n            numero_demande = f\"DA-{datetime.utcnow().strftime('%Y')}-{count:04d}\"\n            \n            # Calculate total\n            total_estime = sum(item['quantiteDemandee'] * item['prixUnitaireEstime'] \n                             for item in data.get('articles', []))\n            \n            purchase_request = PurchaseRequest(\n                numero_demande=numero_demande,\n                date_demande=datetime.fromisoformat(data['dateDemande'].replace('Z', '+00:00')) if 'dateDemande' in data else datetime.utcnow(),\n                requestor_id=data['requestorId'],\n                observations=data.get('observations'),\n                statut=data.get('statut', 'en_attente'),\n                total_articles=len(data.get('articles', [])),\n                total_estime=total_estime\n            )\n            db.session.add(purchase_request)\n            db.session.flush()  # Get the ID\n            \n            # Add articles\n            for article_data in data.get('articles', []):\n                sous_total = article_data['quantiteDemandee'] * article_data['prixUnitaireEstime']\n                \n                item = PurchaseRequestItem(\n                    purchase_request_id=purchase_request.id,\n                    article_id=article_data['articleId'],\n                    supplier_id=article_data.get('supplierId'),\n                    quantite_demandee=article_data['quantiteDemandee'],\n                    prix_unitaire_estime=article_data['prixUnitaireEstime'],\n                    sous_total=sous_total\n                )\n                db.session.add(item)\n            \n            db.session.commit()\n            return jsonify(purchase_request.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    @app.route(\"/api/purchase-requests/<request_id>\", methods=['PUT'])\n    def update_purchase_request(request_id):\n        try:\n            purchase_request = PurchaseRequest.query.get(request_id)\n            if not purchase_request:\n                return jsonify({'message': 'Demande non trouvée'}), 404\n            \n            data = request.get_json()\n            \n            # Handle status updates\n            if 'statut' in data:\n                purchase_request.statut = data['statut']\n            \n            if 'observations' in data:\n                purchase_request.observations = data['observations']\n            \n            # If updating articles, delete existing and recreate\n            if 'articles' in data:\n                # Delete existing items\n                PurchaseRequestItem.query.filter_by(purchase_request_id=request_id).delete()\n                \n                # Add new articles\n                total_estime = 0\n                for article_data in data['articles']:\n                    sous_total = article_data['quantiteDemandee'] * article_data['prixUnitaireEstime']\n                    total_estime += sous_total\n                    \n                    item = PurchaseRequestItem(\n                        purchase_request_id=request_id,\n                        article_id=article_data['articleId'],\n                        supplier_id=article_data.get('supplierId'),\n                        quantite_demandee=article_data['quantiteDemandee'],\n                        prix_unitaire_estime=article_data['prixUnitaireEstime'],\n                        sous_total=sous_total\n                    )\n                    db.session.add(item)\n                \n                purchase_request.total_articles = len(data['articles'])\n                purchase_request.total_estime = total_estime\n            \n            db.session.commit()\n            return jsonify(purchase_request.to_dict())\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la mise à jour', 'error': str(e)}), 400\n\n    @app.route(\"/api/purchase-requests/<request_id>\", methods=['DELETE'])\n    def delete_purchase_request(request_id):\n        try:\n            purchase_request = PurchaseRequest.query.get(request_id)\n            if not purchase_request:\n                return jsonify({'message': 'Demande non trouvée'}), 404\n            \n            # Also delete related items\n            PurchaseRequestItem.query.filter_by(purchase_request_id=request_id).delete()\n            db.session.delete(purchase_request)\n            db.session.commit()\n            return '', 204\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Erreur lors de la suppression'}), 500\n\n    # Purchase Request Items routes\n    @app.route(\"/api/purchase-request-items\", methods=['POST'])\n    def create_purchase_request_item():\n        try:\n            data = request.get_json()\n            item = PurchaseRequestItem(\n                purchase_request_id=data['purchaseRequestId'],\n                article_id=data['articleId'],\n                quantite_demandee=data['quantiteDemandee'],\n                supplier_id=data.get('supplierId'),\n                prix_unitaire_estime=data.get('prixUnitaireEstime'),\n                observations=data.get('observations')\n            )\n            db.session.add(item)\n            \n            # Update total articles count\n            item_count = PurchaseRequestItem.query.filter_by(purchase_request_id=data['purchaseRequestId']).count() + 1\n            purchase_request = PurchaseRequest.query.get(data['purchaseRequestId'])\n            if purchase_request:\n                purchase_request.total_articles = item_count\n            \n            db.session.commit()\n            return jsonify(item.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    @app.route(\"/api/purchase-requests/<request_id>/items\", methods=['GET'])\n    def get_purchase_request_items(request_id):\n        try:\n            items = PurchaseRequestItem.query.filter_by(purchase_request_id=request_id).all()\n            return jsonify([item.to_dict() for item in items])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des éléments'}), 500\n    \n    # Convert Purchase Request to Reception\n    @app.route(\"/api/purchase-requests/<request_id>/convert-reception\", methods=['POST'])\n    def convert_purchase_request_to_reception(request_id):\n        try:\n            data = request.get_json()\n            \n            # Get purchase request and items\n            purchase_request = PurchaseRequest.query.get_or_404(request_id)\n            items = PurchaseRequestItem.query.filter_by(purchase_request_id=request_id).all()\n            \n            # Create reception records for each article\n            receptions_created = []\n            \n            for reception_article in data.get('articles', []):\n                # Find corresponding item\n                item = next((i for i in items if i.id == reception_article['itemId']), None)\n                if not item:\n                    continue\n                \n                # Create reception record\n                reception = Reception(\n                    date_reception=datetime.strptime(data['dateReception'], '%Y-%m-%d').date(),\n                    supplier_id=item.supplier_id,\n                    article_id=item.article_id,\n                    quantite_recue=reception_article['quantiteRecue'],\n                    prix_unitaire=reception_article['prixUnitaire'],\n                    numero_bon_livraison=data.get('numeroBonLivraison'),\n                    observations=data.get('observations')\n                )\n                db.session.add(reception)\n                \n                # Update article stock\n                article = Article.query.get(item.article_id)\n                if article:\n                    article.stock_actuel += reception_article['quantiteRecue']\n                \n                receptions_created.append(reception)\n            \n            db.session.commit()\n            \n            return jsonify({\n                'message': f'{len(receptions_created)} réceptions créées avec succès',\n                'receptions': [r.to_dict() for r in receptions_created]\n            }), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': f'Erreur lors de la conversion: {str(e)}'}), 500\n\n    # Complete purchase request creation\n    @app.route(\"/api/purchase-requests/complete\", methods=['POST'])\n    def create_complete_purchase_request():\n        try:\n            data = request.get_json()\n            \n            # Create purchase request header\n            purchase_request = PurchaseRequest(\n                date_demande=datetime.fromisoformat(data['dateDemande'].replace('Z', '+00:00')) if 'dateDemande' in data else datetime.utcnow(),\n                requestor_id=data['requestorId'],\n                observations=data.get('observations'),\n                total_articles=len(data['items']),\n                statut='en_attente'\n            )\n            db.session.add(purchase_request)\n            db.session.flush()  # Get the ID\n            \n            # Create items\n            items = []\n            for item_data in data['items']:\n                item = PurchaseRequestItem(\n                    purchase_request_id=purchase_request.id,\n                    article_id=item_data['articleId'],\n                    quantite_demandee=item_data['quantiteDemandee'],\n                    supplier_id=item_data.get('supplierId'),\n                    prix_unitaire_estime=item_data.get('prixUnitaireEstime'),\n                    observations=item_data.get('observations')\n                )\n                db.session.add(item)\n                items.append(item)\n            \n            db.session.commit()\n            \n            return jsonify({\n                **purchase_request.to_dict(),\n                'items': [item.to_dict() for item in items]\n            }), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    # Reception routes\n    @app.route(\"/api/receptions\", methods=['GET'])\n    def get_receptions():\n        try:\n            receptions = Reception.query.all()\n            return jsonify([reception.to_dict() for reception in receptions])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des réceptions'}), 500\n\n    @app.route(\"/api/receptions\", methods=['POST'])\n    def create_reception():\n        try:\n            data = request.get_json()\n            reception = Reception(\n                date_reception=datetime.fromisoformat(data['dateReception'].replace('Z', '+00:00')) if 'dateReception' in data else datetime.utcnow(),\n                supplier_id=data['supplierId'],\n                article_id=data['articleId'],\n                quantite_recue=data['quantiteRecue'],\n                prix_unitaire=data.get('prixUnitaire'),\n                numero_bon_livraison=data.get('numeroBonLivraison'),\n                observations=data.get('observations')\n            )\n            db.session.add(reception)\n            \n            # Update article stock\n            article = Article.query.get(data['articleId'])\n            if article:\n                article.stock_actuel += data['quantiteRecue']\n            \n            db.session.commit()\n            return jsonify(reception.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    # Outbound routes\n    @app.route(\"/api/outbounds\", methods=['GET'])\n    def get_outbounds():\n        try:\n            outbounds = Outbound.query.all()\n            return jsonify([outbound.to_dict() for outbound in outbounds])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des sorties'}), 500\n\n    @app.route(\"/api/outbounds\", methods=['POST'])\n    def create_outbound():\n        try:\n            data = request.get_json()\n            outbound = Outbound(\n                date_sortie=datetime.fromisoformat(data['dateSortie'].replace('Z', '+00:00')) if 'dateSortie' in data else datetime.utcnow(),\n                requestor_id=data['requestorId'],\n                article_id=data['articleId'],\n                quantite_sortie=data['quantiteSortie'],\n                motif_sortie=data['motifSortie'],\n                observations=data.get('observations')\n            )\n            db.session.add(outbound)\n            \n            # Update article stock\n            article = Article.query.get(data['articleId'])\n            if article:\n                article.stock_actuel -= data['quantiteSortie']\n                if article.stock_actuel < 0:\n                    article.stock_actuel = 0\n            \n            db.session.commit()\n            return jsonify(outbound.to_dict()), 201\n        except Exception as e:\n            db.session.rollback()\n            return jsonify({'message': 'Données invalides', 'error': str(e)}), 400\n\n    # Analytics routes\n    @app.route(\"/api/analytics/overview\", methods=['GET'])\n    def get_analytics_overview():\n        try:\n            total_articles = Article.query.count()\n            total_suppliers = Supplier.query.count()\n            total_requests = PurchaseRequest.query.count()\n            low_stock_count = Article.query.filter(Article.stock_actuel <= Article.seuil_minimum).count()\n            \n            return jsonify({\n                'totalArticles': total_articles,\n                'totalSuppliers': total_suppliers,\n                'totalRequests': total_requests,\n                'lowStockCount': low_stock_count\n            })\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des analytics'}), 500\n\n    # Dashboard stats endpoint  \n    @app.route(\"/api/dashboard/stats\", methods=['GET'])\n    def get_dashboard_stats():\n        try:\n            total_articles = Article.query.count()\n            total_suppliers = Supplier.query.count()\n            total_requestors = Requestor.query.count()\n            total_requests = PurchaseRequest.query.count()\n            total_receptions = Reception.query.count()\n            total_outbounds = Outbound.query.count()\n            low_stock_count = Article.query.filter(Article.stock_actuel <= Article.seuil_minimum).count()\n            \n            # Get recent activity\n            recent_receptions = Reception.query.order_by(desc(Reception.date_reception)).limit(5).all()\n            recent_outbounds = Outbound.query.order_by(desc(Outbound.date_sortie)).limit(5).all()\n            \n            return jsonify({\n                'totalArticles': total_articles,\n                'totalSuppliers': total_suppliers,\n                'totalRequestors': total_requestors,\n                'totalRequests': total_requests,\n                'totalReceptions': total_receptions,\n                'totalOutbounds': total_outbounds,\n                'lowStockCount': low_stock_count,\n                'recentReceptions': [reception.to_dict() for reception in recent_receptions],\n                'recentOutbounds': [outbound.to_dict() for outbound in recent_outbounds]\n            })\n        except Exception as e:\n            print(f\"Dashboard stats error: {str(e)}\")\n            return jsonify({'message': f'Erreur lors de la récupération des statistiques: {str(e)}'}), 500\n\n    # Stock status analytics\n    @app.route(\"/api/stock-status/analytics\", methods=['GET'])\n    def get_stock_status_analytics():\n        try:\n            articles = Article.query.all()\n            \n            # Categorize by stock levels\n            critical = []  # 0 stock\n            low = []       # below minimum\n            medium = []    # 1-2x minimum\n            good = []      # above 2x minimum\n            \n            for article in articles:\n                seuil = article.seuil_minimum or 10\n                if article.stock_actuel == 0:\n                    critical.append(article.to_dict())\n                elif article.stock_actuel <= seuil:\n                    low.append(article.to_dict())\n                elif article.stock_actuel <= seuil * 2:\n                    medium.append(article.to_dict())\n                else:\n                    good.append(article.to_dict())\n            \n            return jsonify({\n                'critical': critical,\n                'low': low,\n                'medium': medium,\n                'good': good,\n                'summary': {\n                    'critical_count': len(critical),\n                    'low_count': len(low),\n                    'medium_count': len(medium),\n                    'good_count': len(good),\n                    'total_count': len(articles)\n                }\n            })\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération du statut stock'}), 500\n\n    # Purchase follow-up analytics\n    @app.route(\"/api/purchase-follow/status\", methods=['GET'])\n    def get_purchase_follow_status():\n        try:\n            pending = PurchaseRequest.query.filter_by(statut='en_attente').all()\n            approved = PurchaseRequest.query.filter_by(statut='approuve').all()\n            ordered = PurchaseRequest.query.filter_by(statut='commande').all()\n            refused = PurchaseRequest.query.filter_by(statut='refuse').all()\n            \n            return jsonify({\n                'pending': [req.to_dict() for req in pending],\n                'approved': [req.to_dict() for req in approved],\n                'ordered': [req.to_dict() for req in ordered],\n                'refused': [req.to_dict() for req in refused]\n            })\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération du suivi'}), 500\n\n    # Reports endpoints\n    @app.route(\"/api/reports/stock\", methods=['GET'])\n    def generate_stock_report():\n        try:\n            articles = Article.query.all()\n            report_data = {\n                'timestamp': datetime.utcnow().isoformat(),\n                'total_articles': len(articles),\n                'articles': [article.to_dict() for article in articles],\n                'summary': {\n                    'total_value': sum(article.prix_unitaire * article.stock_actuel for article in articles if article.prix_unitaire),\n                    'low_stock_count': len([a for a in articles if a.stock_actuel <= (a.seuil_minimum or 10)])\n                }\n            }\n            return jsonify(report_data)\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la génération du rapport'}), 500\n\n    # Settings endpoints\n    @app.route(\"/api/settings/categories\", methods=['GET'])\n    def get_categories():\n        try:\n            categories = db.session.query(Article.categorie).distinct().all()\n            return jsonify([cat[0] for cat in categories if cat[0]])\n        except Exception as e:\n            return jsonify({'message': 'Erreur lors de la récupération des catégories'}), 500","size_bytes":33074},"run.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nStockCeramique Flask Application\nRun script for the Flask-based inventory management system\n\"\"\"\n\nfrom flask_app import create_app\nimport os\n\nif __name__ == '__main__':\n    app = create_app()\n    \n    # Create database tables\n    with app.app_context():\n        from flask_models import db\n        db.create_all()\n        print(\"Database tables created successfully\")\n    \n    # Get port from environment or default to 5000\n    port = int(os.environ.get('PORT', 5000))\n    \n    print(f\"Starting StockCeramique Flask application on port {port}\")\n    print(\"Access the application at: http://localhost:5000\")\n    \n    # Run the Flask application\n    app.run(\n        host='0.0.0.0', \n        port=port, \n        debug=os.environ.get('FLASK_ENV') == 'development'\n    )","size_bytes":792},"dist-desktop/index-desktop.js":{"content":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// server/index-desktop.ts\nimport express from \"express\";\nimport path2 from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// server/db-local.ts\nimport Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\n\n// shared/schema.ts\nvar schema_exports = {};\n__export(schema_exports, {\n  articles: () => articles,\n  auditLogs: () => auditLogs,\n  backupLogs: () => backupLogs,\n  categories: () => categories,\n  convertToReceptionSchema: () => convertToReceptionSchema,\n  departements: () => departements,\n  insertArticleSchema: () => insertArticleSchema,\n  insertAuditLogSchema: () => insertAuditLogSchema,\n  insertBackupLogSchema: () => insertBackupLogSchema,\n  insertCategorySchema: () => insertCategorySchema,\n  insertCompletePurchaseRequestSchema: () => insertCompletePurchaseRequestSchema,\n  insertDepartementSchema: () => insertDepartementSchema,\n  insertMarqueSchema: () => insertMarqueSchema,\n  insertOutboundSchema: () => insertOutboundSchema,\n  insertPosteSchema: () => insertPosteSchema,\n  insertPurchaseRequestItemSchema: () => insertPurchaseRequestItemSchema,\n  insertPurchaseRequestSchema: () => insertPurchaseRequestSchema,\n  insertReceptionSchema: () => insertReceptionSchema,\n  insertRequestorSchema: () => insertRequestorSchema,\n  insertStockMovementSchema: () => insertStockMovementSchema,\n  insertSupplierSchema: () => insertSupplierSchema,\n  insertSystemSettingSchema: () => insertSystemSettingSchema,\n  insertUserSchema: () => insertUserSchema,\n  marques: () => marques,\n  outbounds: () => outbounds,\n  postes: () => postes,\n  purchaseRequestItems: () => purchaseRequestItems,\n  purchaseRequests: () => purchaseRequests,\n  receptions: () => receptions,\n  requestors: () => requestors,\n  stockMovements: () => stockMovements,\n  suppliers: () => suppliers,\n  systemSettings: () => systemSettings,\n  users: () => users\n});\nimport { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nvar articles = pgTable(\"articles\", {\n  id: varchar(\"id\").primaryKey(),\n  codeArticle: text(\"code_article\").notNull().unique(),\n  designation: text(\"designation\").notNull(),\n  categorie: text(\"categorie\").notNull(),\n  marque: text(\"marque\"),\n  reference: text(\"reference\"),\n  stockInitial: integer(\"stock_initial\").notNull().default(0),\n  stockActuel: integer(\"stock_actuel\").notNull().default(0),\n  unite: text(\"unite\").notNull().default(\"pcs\"),\n  prixUnitaire: decimal(\"prix_unitaire\", { precision: 10, scale: 2 }),\n  seuilMinimum: integer(\"seuil_minimum\").default(10),\n  fournisseurId: varchar(\"fournisseur_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull(),\n  contact: text(\"contact\"),\n  telephone: text(\"telephone\"),\n  email: text(\"email\"),\n  adresse: text(\"adresse\"),\n  conditionsPaiement: text(\"conditions_paiement\"),\n  delaiLivraison: integer(\"delai_livraison\"),\n  // in days\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar requestors = pgTable(\"requestors\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull(),\n  prenom: text(\"prenom\").notNull(),\n  departement: text(\"departement\").notNull(),\n  poste: text(\"poste\"),\n  email: text(\"email\"),\n  telephone: text(\"telephone\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar purchaseRequests = pgTable(\"purchase_requests\", {\n  id: varchar(\"id\").primaryKey(),\n  dateDemande: timestamp(\"date_demande\").notNull().defaultNow(),\n  requestorId: varchar(\"requestor_id\").notNull(),\n  dateInitiation: timestamp(\"date_initiation\").defaultNow(),\n  observations: text(\"observations\"),\n  statut: text(\"statut\").notNull().default(\"en_attente\"),\n  // en_attente, approuve, refuse, commande\n  totalArticles: integer(\"total_articles\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar purchaseRequestItems = pgTable(\"purchase_request_items\", {\n  id: varchar(\"id\").primaryKey(),\n  purchaseRequestId: varchar(\"purchase_request_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteDemandee: integer(\"quantite_demandee\").notNull(),\n  supplierId: varchar(\"supplier_id\"),\n  prixUnitaireEstime: decimal(\"prix_unitaire_estime\", { precision: 10, scale: 2 }),\n  observations: text(\"observations\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar receptions = pgTable(\"receptions\", {\n  id: varchar(\"id\").primaryKey(),\n  dateReception: timestamp(\"date_reception\").notNull().defaultNow(),\n  supplierId: varchar(\"supplier_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteRecue: integer(\"quantite_recue\").notNull(),\n  prixUnitaire: decimal(\"prix_unitaire\", { precision: 10, scale: 2 }),\n  numeroBonLivraison: text(\"numero_bon_livraison\"),\n  observations: text(\"observations\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar outbounds = pgTable(\"outbounds\", {\n  id: varchar(\"id\").primaryKey(),\n  dateSortie: timestamp(\"date_sortie\").notNull().defaultNow(),\n  requestorId: varchar(\"requestor_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteSortie: integer(\"quantite_sortie\").notNull(),\n  motifSortie: text(\"motif_sortie\").notNull(),\n  observations: text(\"observations\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey(),\n  articleId: varchar(\"article_id\").notNull(),\n  type: text(\"type\").notNull(),\n  // entree, sortie\n  quantite: integer(\"quantite\").notNull(),\n  quantiteAvant: integer(\"quantite_avant\").notNull(),\n  quantiteApres: integer(\"quantite_apres\").notNull(),\n  reference: text(\"reference\"),\n  // Reference to reception/outbound ID\n  dateMovement: timestamp(\"date_movement\").notNull().defaultNow(),\n  description: text(\"description\")\n});\nvar users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").unique(),\n  hashedPassword: text(\"hashed_password\").notNull(),\n  role: text(\"role\").notNull().default(\"demandeur\"),\n  // admin, super_admin, magasinier, demandeur, read_only\n  isActive: integer(\"is_active\").notNull().default(1),\n  // 1 = active, 0 = inactive\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\nvar systemSettings = pgTable(\"system_settings\", {\n  id: varchar(\"id\").primaryKey(),\n  category: text(\"category\").notNull(),\n  // stock_management, security, backup, etc.\n  key: text(\"key\").notNull(),\n  value: text(\"value\"),\n  dataType: text(\"data_type\").notNull().default(\"string\"),\n  // string, number, boolean, json\n  description: text(\"description\"),\n  isEditable: integer(\"is_editable\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\nvar auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\"),\n  action: text(\"action\").notNull(),\n  // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.\n  entityType: text(\"entity_type\"),\n  // articles, suppliers, etc.\n  entityId: varchar(\"entity_id\"),\n  oldValues: text(\"old_values\"),\n  // JSON string\n  newValues: text(\"new_values\"),\n  // JSON string\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar backupLogs = pgTable(\"backup_logs\", {\n  id: varchar(\"id\").primaryKey(),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\"),\n  // bytes\n  backupType: text(\"backup_type\").notNull(),\n  // manual, scheduled\n  status: text(\"status\").notNull().default(\"in_progress\"),\n  // in_progress, completed, failed\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n  stockActuel: true\n}).extend({\n  prixUnitaire: z.coerce.number().nullable().optional(),\n  fournisseurId: z.coerce.string().nullable().optional()\n});\nvar insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true\n});\nvar insertRequestorSchema = createInsertSchema(requestors).omit({\n  id: true,\n  createdAt: true\n});\nvar insertPurchaseRequestSchema = createInsertSchema(purchaseRequests).omit({\n  id: true,\n  createdAt: true,\n  dateInitiation: true,\n  totalArticles: true\n}).extend({\n  dateDemande: z.string().transform((str) => new Date(str))\n});\nvar insertPurchaseRequestItemSchema = createInsertSchema(purchaseRequestItems).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  prixUnitaireEstime: z.coerce.number().nullable().optional(),\n  supplierId: z.string().nullable().optional()\n});\nvar insertCompletePurchaseRequestSchema = z.object({\n  dateDemande: z.string().transform((str) => new Date(str)),\n  requestorId: z.string(),\n  observations: z.string().optional(),\n  items: z.array(z.object({\n    articleId: z.string(),\n    quantiteDemandee: z.number().positive(),\n    supplierId: z.string().nullable().optional(),\n    prixUnitaireEstime: z.coerce.number().nullable().optional(),\n    observations: z.string().optional()\n  })).min(1, \"Au moins un article est requis\")\n});\nvar insertReceptionSchema = createInsertSchema(receptions).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  prixUnitaire: z.coerce.number().nullable().optional(),\n  dateReception: z.string().transform((str) => new Date(str))\n});\nvar insertOutboundSchema = createInsertSchema(outbounds).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  dateSortie: z.string().transform((str) => new Date(str))\n});\nvar insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true\n});\nvar insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLogin: true\n});\nvar insertSystemSettingSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\nvar insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true\n});\nvar insertBackupLogSchema = createInsertSchema(backupLogs).omit({\n  id: true,\n  createdAt: true\n});\nvar convertToReceptionSchema = z.object({\n  quantiteRecue: z.number().positive().optional(),\n  prixUnitaire: z.coerce.number().nullable().optional(),\n  numeroBonLivraison: z.string().optional(),\n  observations: z.string().optional(),\n  dateReception: z.string().optional()\n});\nvar categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar marques = pgTable(\"marques\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar departements = pgTable(\"departements\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar postes = pgTable(\"postes\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull().unique(),\n  departementId: varchar(\"departement_id\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\nvar insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true\n});\nvar insertMarqueSchema = createInsertSchema(marques).omit({\n  id: true,\n  createdAt: true\n});\nvar insertDepartementSchema = createInsertSchema(departements).omit({\n  id: true,\n  createdAt: true\n});\nvar insertPosteSchema = createInsertSchema(postes).omit({\n  id: true,\n  createdAt: true\n});\n\n// server/db-local.ts\nimport path from \"path\";\nimport fs from \"fs\";\nvar getUserDataPath = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    return path.join(process.cwd(), \"data\");\n  }\n  return path.join(process.cwd(), \"data\");\n};\nvar dataDir = getUserDataPath();\nif (!fs.existsSync(dataDir)) {\n  fs.mkdirSync(dataDir, { recursive: true });\n}\nvar dbPath = path.join(dataDir, \"stockceramique.db\");\nvar sqlite = new Database(dbPath);\nsqlite.pragma(\"foreign_keys = ON\");\nvar db = drizzle(sqlite, { schema: schema_exports });\nvar initializeDatabase = () => {\n  try {\n    console.log(\"Initializing local SQLite database...\");\n    console.log(\"Database path:\", dbPath);\n    const schemaSQL = `\n      -- Articles table\n      CREATE TABLE IF NOT EXISTS articles (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        reference TEXT NOT NULL UNIQUE,\n        designation TEXT NOT NULL,\n        stock_quantity INTEGER NOT NULL DEFAULT 0,\n        min_stock INTEGER NOT NULL DEFAULT 0,\n        unit_price REAL NOT NULL DEFAULT 0,\n        supplier_id INTEGER,\n        category TEXT,\n        location TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch()),\n        FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n      );\n\n      -- Suppliers table\n      CREATE TABLE IF NOT EXISTS suppliers (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        contact_person TEXT,\n        email TEXT,\n        phone TEXT,\n        address TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch())\n      );\n\n      -- Requestors table\n      CREATE TABLE IF NOT EXISTS requestors (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        department TEXT,\n        email TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch())\n      );\n\n      -- Purchase Requests table\n      CREATE TABLE IF NOT EXISTS purchase_requests (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        requestor_id INTEGER NOT NULL,\n        status TEXT NOT NULL DEFAULT 'pending',\n        total_amount REAL NOT NULL DEFAULT 0,\n        notes TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch()),\n        FOREIGN KEY (requestor_id) REFERENCES requestors(id)\n      );\n\n      -- Purchase Request Items table\n      CREATE TABLE IF NOT EXISTS purchase_request_items (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        purchase_request_id INTEGER NOT NULL,\n        article_id INTEGER NOT NULL,\n        quantity INTEGER NOT NULL,\n        unit_price REAL NOT NULL,\n        supplier_id INTEGER,\n        FOREIGN KEY (purchase_request_id) REFERENCES purchase_requests(id) ON DELETE CASCADE,\n        FOREIGN KEY (article_id) REFERENCES articles(id),\n        FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n      );\n\n      -- Receptions table\n      CREATE TABLE IF NOT EXISTS receptions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        purchase_request_id INTEGER,\n        supplier_id INTEGER NOT NULL,\n        delivery_note TEXT,\n        total_amount REAL NOT NULL DEFAULT 0,\n        status TEXT NOT NULL DEFAULT 'pending',\n        received_at INTEGER DEFAULT (unixepoch()),\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch()),\n        FOREIGN KEY (purchase_request_id) REFERENCES purchase_requests(id),\n        FOREIGN KEY (supplier_id) REFERENCES suppliers(id)\n      );\n\n      -- Reception Items table\n      CREATE TABLE IF NOT EXISTS reception_items (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        reception_id INTEGER NOT NULL,\n        article_id INTEGER NOT NULL,\n        quantity INTEGER NOT NULL,\n        unit_price REAL NOT NULL,\n        FOREIGN KEY (reception_id) REFERENCES receptions(id) ON DELETE CASCADE,\n        FOREIGN KEY (article_id) REFERENCES articles(id)\n      );\n\n      -- Outbounds table\n      CREATE TABLE IF NOT EXISTS outbounds (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        requestor_id INTEGER NOT NULL,\n        total_quantity INTEGER NOT NULL DEFAULT 0,\n        notes TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        updated_at INTEGER DEFAULT (unixepoch()),\n        FOREIGN KEY (requestor_id) REFERENCES requestors(id)\n      );\n\n      -- Outbound Items table\n      CREATE TABLE IF NOT EXISTS outbound_items (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        outbound_id INTEGER NOT NULL,\n        article_id INTEGER NOT NULL,\n        quantity INTEGER NOT NULL,\n        FOREIGN KEY (outbound_id) REFERENCES outbounds(id) ON DELETE CASCADE,\n        FOREIGN KEY (article_id) REFERENCES articles(id)\n      );\n\n      -- Stock Movements table\n      CREATE TABLE IF NOT EXISTS stock_movements (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        article_id INTEGER NOT NULL,\n        type TEXT NOT NULL,\n        quantity INTEGER NOT NULL,\n        reference_id INTEGER,\n        reference_type TEXT,\n        notes TEXT,\n        created_at INTEGER DEFAULT (unixepoch()),\n        FOREIGN KEY (article_id) REFERENCES articles(id)\n      );\n\n      -- Create indexes for better performance\n      CREATE INDEX IF NOT EXISTS idx_articles_reference ON articles(reference);\n      CREATE INDEX IF NOT EXISTS idx_articles_supplier ON articles(supplier_id);\n      CREATE INDEX IF NOT EXISTS idx_stock_movements_article ON stock_movements(article_id);\n      CREATE INDEX IF NOT EXISTS idx_stock_movements_type ON stock_movements(type);\n      CREATE INDEX IF NOT EXISTS idx_purchase_requests_status ON purchase_requests(status);\n      CREATE INDEX IF NOT EXISTS idx_receptions_status ON receptions(status);\n    `;\n    sqlite.exec(schemaSQL);\n    console.log(\"\\u2705 Database initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"\\u274C Error initializing database:\", error);\n    return false;\n  }\n};\nvar sqlite3 = sqlite;\nprocess.on(\"exit\", () => {\n  sqlite.close();\n});\nprocess.on(\"SIGINT\", () => {\n  sqlite.close();\n  process.exit(0);\n});\n\n// server/index-desktop.ts\nvar __filename = typeof __filename !== \"undefined\" ? __filename : fileURLToPath(import.meta.url);\nvar __dirname = typeof __dirname !== \"undefined\" ? __dirname : path2.dirname(__filename);\nvar app = express();\nvar PORT = parseInt(process.env.DESKTOP_PORT || \"3001\");\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: true }));\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, PATCH\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\n  if (req.method === \"OPTIONS\") {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\nvar dbInitialized = initializeDatabase();\nif (!dbInitialized) {\n  console.error(\"Failed to initialize database\");\n  process.exit(1);\n}\napp.get(\"/api/health\", (req, res) => {\n  res.json({\n    status: \"Desktop server running\",\n    database: \"SQLite connected\",\n    dbPath: sqlite3.name\n  });\n});\napp.get(\"/api/articles\", (req, res) => {\n  try {\n    const articles2 = sqlite3.prepare(\"SELECT * FROM articles ORDER BY created_at DESC\").all();\n    res.json(articles2);\n  } catch (error) {\n    console.error(\"Error fetching articles:\", error);\n    res.status(500).json({ error: \"Failed to fetch articles\" });\n  }\n});\napp.post(\"/api/articles\", (req, res) => {\n  try {\n    const { reference, designation, stock_quantity, min_stock, unit_price, supplier_id, category, location } = req.body;\n    const stmt = sqlite3.prepare(`\n      INSERT INTO articles (reference, designation, stock_quantity, min_stock, unit_price, supplier_id, category, location)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    const result = stmt.run(reference, designation, stock_quantity || 0, min_stock || 0, unit_price || 0, supplier_id, category, location);\n    const newArticle = sqlite3.prepare(\"SELECT * FROM articles WHERE id = ?\").get(result.lastInsertRowid);\n    res.status(201).json(newArticle);\n  } catch (error) {\n    console.error(\"Error creating article:\", error);\n    res.status(500).json({ error: \"Failed to create article\" });\n  }\n});\napp.get(\"/api/dashboard/stats\", (req, res) => {\n  try {\n    const totalArticles = sqlite3.prepare(\"SELECT COUNT(*) as count FROM articles\").get();\n    const lowStock = sqlite3.prepare(\"SELECT COUNT(*) as count FROM articles WHERE stock_quantity <= min_stock\").get();\n    const totalValue = sqlite3.prepare(\"SELECT SUM(stock_quantity * unit_price) as total FROM articles\").get();\n    res.json({\n      totalArticles: totalArticles.count || 0,\n      lowStock: lowStock.count || 0,\n      totalValue: totalValue.total || 0,\n      pendingRequests: 0\n      // Placeholder\n    });\n  } catch (error) {\n    console.error(\"Error fetching dashboard stats:\", error);\n    res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n  }\n});\nif (process.env.NODE_ENV === \"production\") {\n  const publicPath = path2.join(__dirname, \"../dist/public\");\n  app.use(express.static(publicPath));\n  app.get(\"*\", (req, res) => {\n    if (!req.path.startsWith(\"/api/\")) {\n      res.sendFile(path2.join(publicPath, \"index.html\"));\n    }\n  });\n}\napp.use((err, req, res, next) => {\n  console.error(\"Server error:\", err);\n  res.status(500).json({ error: \"Internal server error\" });\n});\nvar server = app.listen(PORT, \"127.0.0.1\", () => {\n  console.log(`\\u{1F5A5}\\uFE0F  Desktop server running on http://127.0.0.1:${PORT}`);\n  console.log(`\\u{1F4C1} Database path: ${sqlite3.name}`);\n  console.log(`\\u{1F680} Mode: ${process.env.NODE_ENV || \"development\"}`);\n});\nvar index_desktop_default = server;\nexport {\n  index_desktop_default as default\n};\n","size_bytes":21657}},"version":1}